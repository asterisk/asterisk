
ifeq ($(NOISY_BUILD),)
SUBMAKE?=$(MAKE) --quiet --no-print-directory
ECHO_PREFIX?=@
CMD_PREFIX?=@
QUIET_CONFIGURE=-q
REALLY_QUIET=&>/dev/null
else
SUBMAKE?=$(MAKE)
ECHO_PREFIX?=@\#
CMD_PREFIX?=
QUIET_CONFIGURE=
REALLY_QUIET=
endif

# These are needed as fallbacks if top-level configure hasn't been run.
# This doesn't guarantee that a third-party package will compile.

find_program=$(firstword $(wildcard $(addsuffix /$(1),$(subst :, ,$(PATH)))))
fail_program=$(if $(call find_program,$(1)),$(call find_program,$(1)),$(error Unable to find '$(1)'))

TAR ?= $(call fail_program,tar)
PATCH ?= $(call fail_program,patch)
SED ?= $(call fail_program,sed)
NM ?= $(call fail_program,nm)
DOWNLOAD ?= $(or $(call find_program,wget),$(call find_program,curl),$(call find_program,fetch))

# These are needed regardless of whether top-level configure has been run.

# Output to stdout to be comatible with curl
ifeq ($(findstring wget,$(DOWNLOAD)),wget)
DOWNLOAD += -O-
endif

# Output to stdout to be comatible with curl
ifeq ($(findstring fetch,$(DOWNLOAD)),fetch)
DOWNLOAD += -o-
endif

# Follow redirects
ifeq ($(findstring curl,$(DOWNLOAD)),curl)
DOWNLOAD += -L
endif

export SUBMAKE
export ECHO_PREFIX
export CMD_PREFIX
export QUIET_CONFIGURE
export REALLY_QUIET
export ASTTOPDIR
export ASTSBINDIR
export DESTDIR
export ASTDATADIR
export TAR
export PATCH
export SED
export NM
export DOWNLOAD
