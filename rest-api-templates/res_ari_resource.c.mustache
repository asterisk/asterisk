{{#api_declaration}}
/*
 * Asterisk -- An open source telephony toolkit.
 *
 * {{{copyright}}}
 *
 * {{{author}}}
{{! Template Copyright
 * Copyright (C) 2013, Digium, Inc.
 *
 * David M. Lee, II <dlee@digium.com>
}}
 *
 * See http://www.asterisk.org for more information about
 * the Asterisk project. Please do not directly contact
 * any of the maintainers of this project for assistance;
 * the project provides a web site, mailing lists and IRC
 * channels for your use.
 *
 * This program is free software, distributed under the terms of
 * the GNU General Public License Version 2. See the LICENSE file
 * at the top of the source tree.
 */

{{! Template for rendering the res_ module for an HTTP resource. }}
/*
{{> do-not-edit}}
 * This file is generated by a mustache template. Please see the original
 * template in rest-api-templates/res_ari_resource.c.mustache
 */

/*! \file
 *
 * \brief {{{description}}}
 *
 * \author {{{author}}}
 */

/*** MODULEINFO
	<depend type="module">res_ari</depend>
	<depend type="module">res_ari_model</depend>
	<depend type="module">res_stasis</depend>
{{#requires_modules}}
	<depend type="module">{{.}}</depend>
{{/requires_modules}}
	<support_level>core</support_level>
 ***/

#include "asterisk.h"

#include "asterisk/app.h"
#include "asterisk/module.h"
#include "asterisk/stasis_app.h"
#include "ari/resource_{{c_name}}.h"
#if defined(AST_DEVMODE)
#include "ari/ari_model_validators.h"
#endif

#define MAX_VALS 128

{{#apis}}
{{#operations}}
{{#is_req}}
{{> body_parsing}}
/*!
 * \brief Parameter parsing callback for {{path}}.
 * \param ser TCP/TLS session object
 * \param get_params GET parameters in the HTTP request.
 * \param path_vars Path variables extracted from the request.
 * \param headers HTTP headers.
 * \param body
 * \param[out] response Response to the HTTP request.
 */
static void ast_ari_{{c_name}}_{{c_nickname}}_cb(
	struct ast_tcptls_session_instance *ser,
	struct ast_variable *get_params, struct ast_variable *path_vars,
	struct ast_variable *headers, struct ast_json *body, struct ast_ari_response *response)
{
	struct ast_ari_{{c_name}}_{{c_nickname}}_args args = {};
{{#has_parameters}}
	struct ast_variable *i;
{{/has_parameters}}
#if defined(AST_DEVMODE)
	int is_valid;
	int code;
#endif /* AST_DEVMODE */

{{> param_parsing}}
{{^is_binary_response}}
	ast_ari_{{c_name}}_{{c_nickname}}(headers, &args, response);
{{/is_binary_response}}
{{#is_binary_response}}
	ast_ari_{{c_name}}_{{c_nickname}}(ser, headers, &args, response);
{{/is_binary_response}}
#if defined(AST_DEVMODE)
	code = response->response_code;

	switch (code) {
	case 0: /* Implementation is still a stub, or the code wasn't set */
		is_valid = response->message == NULL;
		break;
	case 500: /* Internal Server Error */
	case 501: /* Not Implemented */
{{#error_responses}}
	case {{code}}: /* {{{reason}}} */
{{/error_responses}}
		is_valid = 1;
		break;
	default:
		if (200 <= code && code <= 299) {
{{#response_class}}
{{#is_list}}
			is_valid = ast_ari_validate_list(response->message,
				ast_ari_validate_{{c_singular_name}}_fn());
{{/is_list}}
{{^is_list}}
{{^is_binary_response}}
			is_valid = ast_ari_validate_{{c_name}}(
				response->message);
{{/is_binary_response}}
{{#is_binary_response}}
			/* No validation on a raw binary response */
			is_valid = 1;
{{/is_binary_response}}
{{/is_list}}
{{/response_class}}
		} else {
			ast_log(LOG_ERROR, "Invalid error response %d for {{path}}\n", code);
			is_valid = 0;
		}
	}

	if (!is_valid) {
		ast_log(LOG_ERROR, "Response validation failed for {{path}}\n");
		ast_ari_response_error(response, 500,
			"Internal Server Error", "Response validation failed");
	}
#endif /* AST_DEVMODE */

fin: __attribute__((unused))
{{> param_cleanup}}
	return;
}
{{/is_req}}
{{/operations}}
{{/apis}}

{{! The rest_handler partial expands to the tree of stasis_rest_handlers }}
{{#root_path}}
{{> rest_handler}}
{{/root_path}}

static int unload_module(void)
{
	ast_ari_remove_handler(&{{root_full_name}});
	return 0;
}

static int load_module(void)
{
	int res = 0;

{{#apis}}
{{#operations}}
{{#is_websocket}}
	{{full_name}}.is_websocket = 1;
{{/is_websocket}}
{{/operations}}
{{/apis}}

	res |= ast_ari_add_handler(&{{root_full_name}});
	if (res) {
		unload_module();
		return AST_MODULE_LOAD_DECLINE;
	}

	return AST_MODULE_LOAD_SUCCESS;
}

AST_MODULE_INFO(ASTERISK_GPL_KEY, AST_MODFLAG_DEFAULT, "RESTful API module - {{{description}}}",
	.support_level = AST_MODULE_SUPPORT_CORE,
	.load = load_module,
	.unload = unload_module,
	.requires = "res_ari,res_ari_model,res_stasis{{#requires_modules}},{{.}}{{/requires_modules}}",
);
{{/api_declaration}}
