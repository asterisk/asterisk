#
# Asterisk -- An open source telephony toolkit.
#
# Makefile rules for subdirectories containing modules
#
# Copyright (C) 2006, Digium, Inc.
#
# Kevin P. Fleming <kpfleming@digium.com>
#
# This program is free software, distributed under the terms of
# the GNU General Public License
#

# Makefile rules for building modules.

# In most cases, we set target-specific variables for certain targets
# (remember that they apply recursively to prerequisites).
# Also note that we can only set one variable per rule, so we have to
# repeat the left hand side to set multiple variables.

ifeq ($(findstring LOADABLE_MODULES,$(MENUSELECT_CFLAGS)),)
  _ASTCFLAGS+=${GC_CFLAGS}
endif

ifneq ($(findstring STATIC_BUILD,$(MENUSELECT_CFLAGS)),)
  STATIC_BUILD=-static
endif

include $(ASTTOPDIR)/Makefile.rules

# If MODULE_PREFIX is defined, use it to run the standard functions to set
# C_MODS, CC_MODS, LOADABLE_MODS and EMBEDDED_MODS.
# Each word of MODULE_PREFIX is a prefix for filenames that we consider
# valid C or CC modules (eg. app, func ...). Note that the underscore
# is added here, and does not need to be in MODULE_PREFIX
#
# Use MODULE_EXCLUDE to specify additional modules to exclude.

ifneq ($(MODULE_PREFIX),)
    ALL_C_MODS:=
    ALL_CC_MODS:=
    ALL_C_MODS+=$(foreach p,$(MODULE_PREFIX),$(patsubst %.c,%,$(wildcard $(p)_*.c)))
    ALL_CC_MODS+=$(foreach p,$(MODULE_PREFIX),$(patsubst %.cc,%,$(wildcard $(p)_*.cc)))
endif
 
C_MODS:=$(filter-out $(MENUSELECT_$(MENUSELECT_CATEGORY)),$(ALL_C_MODS))
CC_MODS:=$(filter-out $(MENUSELECT_$(MENUSELECT_CATEGORY)),$(ALL_CC_MODS))

ifneq ($(findstring EMBED_$(MENUSELECT_CATEGORY),$(MENUSELECT_EMBED)),)
    EMBEDDED_MODS:=$(C_MODS) $(CC_MODS)
else
    LOADABLE_MODS:=$(C_MODS) $(CC_MODS)
endif

# Both C++ and C++ sources need their module name in AST_MODULE
# We also pass whatever _INCLUDE list is generated by menuselect
# (they are stored in file 'makeopts'). This is also necessary
# for components used to build modules, which can't be determined
# by the rules in this file, so the MOD_ASTCFLAGS definition
# is used to collect the required flags for a module... which can
# then be used any place they are required.

MOD_ASTCFLAGS=-DAST_MODULE=\"$(1)\" $(MENUSELECT_OPTS_$(1):%=-D%) $(foreach dep,$(MENUSELECT_DEPENDS_$(1)),$(value $(dep)_INCLUDE))

$(addsuffix .oo,$(CC_MODS)) $(addsuffix .o,$(C_MODS)):	\
	_ASTCFLAGS+=$(call MOD_ASTCFLAGS,$*)

ifeq ($(findstring $(OSARCH), mingw32 cygwin ),)
   # don't define -fPIC on mingw32 and cygwin, it is the default
   $(LOADABLE_MODS:%=%.so): _ASTCFLAGS+=-fPIC
endif

# For loadable modules, pass _LIB and _LDFLAGS from menuselect.
$(LOADABLE_MODS:%=%.so): LIBS+=$(foreach dep,$(MENUSELECT_DEPENDS_$*),$(value $(dep)_LIB))
$(LOADABLE_MODS:%=%.so): _ASTLDFLAGS+=$(foreach dep,$(MENUSELECT_DEPENDS_$*),$(value $(dep)_LDFLAGS))

$(EMBEDDED_MODS:%=%.o): _ASTCFLAGS+=-DEMBEDDED_MODULE=$*

$(addsuffix .so,$(filter $(LOADABLE_MODS),$(C_MODS))): %.so: %.o
$(addsuffix .so,$(filter $(LOADABLE_MODS),$(CC_MODS))): %.so: %.oo

modules.link: $(addsuffix .eo,$(filter $(EMBEDDED_MODS),$(C_MODS)))

.PHONY: clean uninstall _all moduleinfo makeopts

ifneq ($(LOADABLE_MODS),)
_all: $(LOADABLE_MODS:%=%.so)
ifneq ($(findstring $(OSARCH), mingw32 cygwin ),)
  # linker options and extra libraries for cygwin
  SOLINK=-Wl,--out-implib=lib$@.a -shared
  LIBS+=-L$(ASTTOPDIR)/main -lasterisk -L$(ASTTOPDIR)/res $($@_LIBS)
  # additional libraries in res/
endif
endif

ifneq ($(EMBEDDED_MODS),)
_all: modules.link
__embed_ldscript:
	@echo "../$(SUBDIR)/modules.link"
__embed_ldflags:
	@echo "$(foreach mod,$(filter $(EMBEDDED_MODS),$(C_MODS)),$(foreach dep,$(MENUSELECT_DEPENDS_$(mod)),$(dep)_LDFLAGS))"
	@echo "$(foreach mod,$(filter $(EMBEDDED_MODS),$(CC_MODS)),$(foreach dep,$(MENUSELECT_DEPENDS_$(mod)),$(dep)_LDFLAGS))"
__embed_libs:
	@echo "$(foreach mod,$(filter $(EMBEDDED_MODS),$(C_MODS)),$(foreach dep,$(MENUSELECT_DEPENDS_$(mod)),$(dep)_LIB))"
	@echo "$(foreach mod,$(filter $(EMBEDDED_MODS),$(CC_MODS)),$(foreach dep,$(MENUSELECT_DEPENDS_$(mod)),$(dep)_LIB))"
else
__embed_ldscript:
__embed_ldflags:
__embed_libs:
endif

modules.link:
	@rm -f $@
	@for file in $(patsubst %,$(SUBDIR)/%,$(filter %.eo,$^)); do echo "INPUT (../$${file})" >> $@; done
	@for file in $(patsubst %,$(SUBDIR)/%,$(filter-out %.eo,$^)); do echo "INPUT (../$${file})" >> $@; done

clean::
	rm -f *.so *.o *.oo *.eo *.i *.ii
	rm -f .*.d
	rm -f *.s *.i
	rm -f *.gcda *.gcno
	rm -f modules.link

install:: all
	@echo "Installing modules from `basename $(CURDIR)`..."
	@for x in $(LOADABLE_MODS:%=%.so); do $(INSTALL) -m 755 $$x "$(DESTDIR)$(ASTMODDIR)" ; done
ifneq ($(findstring :,$(XMLSTARLET)$(BASH)),:)
	@if [ -f .moduleinfo ] ; then \
		declare -A DISABLED_MODS ;\
		for x in $(MENUSELECT_$(MENUSELECT_CATEGORY)) ; do DISABLED_MODS[$${x}]=1 ; done ;\
		EXTERNAL_MODS=$$(xmlstarlet sel -t -m "/category/member[support_level = 'external']" -v "@name" -n .moduleinfo) ;\
		for x in $${EXTERNAL_MODS} ; do \
			if [ -z "$${DISABLED_MODS[$${x}]}" ] ; then \
				$(ASTTOPDIR)/build_tools/download_externals $${x} ;\
			fi ;\
		done ;\
	fi
endif

uninstall::

dist-clean::
	rm -f .*.moduleinfo .moduleinfo
	rm -f .*.makeopts .makeopts
	rm -f *.exports

.%.moduleinfo: %.c
	@echo "<member name=\"$*\" displayname=\"$(shell $(GREP) -e AST_MODULE_INFO $< | head -n 1 | cut -d '"' -f 2)\" remove_on_change=\"$(SUBDIR)/$*.o $(SUBDIR)/$*.so\">" > $@
	$(AWK) -f $(ASTTOPDIR)/build_tools/get_moduleinfo $^ >> $@
	echo "</member>" >> $@

.%.moduleinfo: %.cc
	@echo "<member name=\"$*\" displayname=\"$(shell $(GREP) -e AST_MODULE_INFO $< | head -n 1 | cut -d '"' -f 2)\" remove_on_change=\"$(SUBDIR)/$*.oo $(SUBDIR)/$*.so\">" > $@
	$(AWK) -f $(ASTTOPDIR)/build_tools/get_moduleinfo $^ >> $@
	echo "</member>" >> $@

.moduleinfo:: $(addsuffix .moduleinfo,$(addprefix .,$(sort $(ALL_C_MODS) $(ALL_CC_MODS)))) $(wildcard $(call tolower,$(MENUSELECT_CATEGORY)).xml)
	@echo "<category name=\"MENUSELECT_$(MENUSELECT_CATEGORY)\" displayname=\"$(MENUSELECT_DESCRIPTION)\" remove_on_change=\"$(SUBDIR)/modules.link\">" > $@
	@cat $^ >> $@
	@echo "</category>" >> $@

moduleinfo: .moduleinfo
	@cat $<

.%.makeopts: %.c
	@$(AWK) -f $(ASTTOPDIR)/build_tools/get_makeopts $< > $@

.%.makeopts: %.cc
	@$(AWK) -f $(ASTTOPDIR)/build_tools/get_makeopts $< > $@

.makeopts:: $(addsuffix .makeopts,$(addprefix .,$(ALL_C_MODS) $(ALL_CC_MODS)))
	@cat $^ > $@

makeopts: .makeopts
	@cat $<

ifneq ($(wildcard .*.d),)
   include .*.d
endif
