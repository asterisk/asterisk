===========================================================
===
=== Information for upgrading between Asterisk versions
===
=== These files document all the changes that MUST be taken
=== into account when upgrading between the Asterisk
=== versions listed below. These changes may require that
=== you modify your configuration files, dialplan or (in
=== some cases) source code if you have your own Asterisk
=== modules or patches. These files also include advance
=== notice of any functionality that has been marked as
=== 'deprecated' and may be removed in a future release,
=== along with the suggested replacement functionality.
===
=== UPGRADE-1.2.txt -- Upgrade info for 1.0 to 1.2
=== UPGRADE-1.4.txt -- Upgrade info for 1.2 to 1.4
=== UPGRADE-1.6.txt -- Upgrade info for 1.4 to 1.6
=== UPGRADE-1.8.txt -- Upgrade info for 1.6 to 1.8
=== UPGRADE-10.txt  -- Upgrade info for 1.8 to 10
=== UPGRADE-11.txt  -- Upgrade info for 10 to 11
=== UPGRADE-12.txt  -- Upgrade info for 11 to 12
=== UPGRADE-13.txt  -- Upgrade info for 12 to 13
=== UPGRADE-14.txt  -- Upgrade info for 13 to 14
===========================================================

Build System:
 - The LOW_MEMORY compile option no longer disables inline API.  To disable
   inline API you must use the DISABLE_INLINE option.

Queue:
 - When reloading the members of a queue, the members added dynamically (i.e.
   added via the CLI command "queue add" or the AMI action "QueueAdd") now have
   their ringinuse value updated to the value of the queue. Previously, the
   ringinuse value for dynamic members was not updated on reload.

Queue log:
 - The RINGNOANSWER event is now logged every time the caller hangs up,
   not only after queue timeout. The data1 field still contains number of
   miliseconds since start of ringing (for examples see issue ASTERISK-26665).

Channel Drivers:

chan_dahdi:
 - Support for specifying a DAHDI channel using a path under /dev/dahdi
   ("by name") has been removed. It was never used. Instead you should
   use kernel-level channel number allocation using span assignments.
   See the documentation of dahdi-linux and dahdi-tools.

