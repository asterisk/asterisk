name: PROpenedOrUpdated
run-name: "PR ${{github.event.number}} ${{github.event.action}} by ${{ github.actor }}"
on:
#  workflow_dispatch:
  pull_request_target:
    types: [opened, reopened, synchronize]

#concurrency:
#  group: ${{github.workflow}}-${{github.event.number}}
#  cancel-in-progress: true

env:
  ASTERISK_REPO:     ${{github.repository}}
  PR_NUMBER:         ${{github.event.number}}
  PR_COMMIT:         ${{github.event.pull_request.head.sha}}
  BRANCH:            ${{github.event.pull_request.base.ref}}
  GITHUB_TOKEN:      ${{secrets.GITHUB_TOKEN}}
  MODULES_BLACKLIST: ${{vars.GATETEST_MODULES_BLACKLIST}} ${{vars.UNITTEST_MODULES_BLACKLIST}}

jobs:
  AsteriskUnitTests:
    runs-on: ubuntu-latest
    steps:
      - name: Run Unit Tests
        uses: asterisk/asterisk-ci-actions/AsteriskUnitComposite@main
        with:
          asterisk_repo:     ${{env.ASTERISK_REPO}}
          pr_number:         ${{env.PR_NUMBER}}
          base_branch:       ${{env.BRANCH}}
          modules_blacklist: ${{env.MODULES_BLACKLIST}}
          github_token:      ${{secrets.GITHUB_TOKEN}}
          unittest_command:  ${{vars.UNITTEST_COMMAND}}

      - name: Get Token needed to add reviewers
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{secrets.ASTERISK_ORG_ACCESS_APP_ID}}
          application_private_key: ${{secrets.ASTERISK_ORG_ACCESS_APP_PRIV_KEY}}
          organization: asterisk

      - name: Add Reviewers
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{steps.get_workflow_token.outputs.token}}
          GH_TOKEN: ${{steps.get_workflow_token.outputs.token}}
          REVIEWERS: ${{vars.PR_REVIEWERS}}
        run: |
          echo "${{env.GITHUB_ACTION}} Add reviewers"
          IFS=$'; \n'
          for r in $REVIEWERS ; do
            gh pr edit --repo ${ASTERISK_REPO} ${PR_NUMBER} --add-reviewer $r
          done

  AsteriskGate:
    needs: AsteriskUnitTests
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        group: ${{ fromJSON(vars.GATETEST_LIST) }}
    runs-on: ubuntu-latest
    steps:
      - id: runtest
        name: Run Gate Tests for ${{ matrix.group }}
        uses: asterisk/asterisk-ci-actions/AsteriskGateComposite@main
        with:
          test_type:         Gate
          asterisk_repo:     ${{env.ASTERISK_REPO}}
          pr_number:         ${{env.PR_NUMBER}}
          base_branch:       ${{env.BRANCH}}
          modules_blacklist: ${{env.MODULES_BLACKLIST}}
          github_token:      ${{secrets.GITHUB_TOKEN}}
          testsuite_repo:    ${{vars.TESTSUITE_REPO}}
          gatetest_group:    ${{matrix.group}}
          gatetest_commands: ${{vars.GATETEST_COMMANDS}}


  AsteriskGateTests:
    name: AsteriskGateTests
    if: always()
    runs-on: ubuntu-latest
    needs: AsteriskGate
    steps:
      - name: Check test matrix status
        env:
          RESULT: ${{ needs.AsteriskGate.result }}
        run: |
          echo "all results: ${{ toJSON(needs.*.result) }}"
          echo "composite result: ${{ needs.AsteriskGate.result }}"

          case $RESULT in
            success)
              echo "::notice::All Testsuite tests passed"
              exit 0
              ;;
            skipped)
              echo "::error::Testsuite tests were skipped because of an earlier failure"
              exit 1
              ;;
              *)
              echo "::error::One or more Testsuite tests failed ($RESULT)"
              exit 1
          esac
